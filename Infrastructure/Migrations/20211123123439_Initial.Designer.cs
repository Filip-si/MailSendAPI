// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211123123439_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.Property<Guid?>("FileAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("DataFiles")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FilesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileAttachmentId");

                    b.HasIndex("FilesId");

                    b.ToTable("FileAttachments");
                });

            modelBuilder.Entity("Domain.Entities.FileBody", b =>
                {
                    b.Property<Guid?>("FileBodyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("DataFiles")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileBodyId");

                    b.ToTable("FileBodies");
                });

            modelBuilder.Entity("Domain.Entities.FileFooter", b =>
                {
                    b.Property<Guid?>("FileFooterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("DataFiles")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileFooterId");

                    b.ToTable("FileFooters");
                });

            modelBuilder.Entity("Domain.Entities.FileHeader", b =>
                {
                    b.Property<Guid?>("FileHeaderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("DataFiles")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FileHeaderId");

                    b.ToTable("FileHeaders");
                });

            modelBuilder.Entity("Domain.Entities.Files", b =>
                {
                    b.Property<Guid?>("FilesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FileBodyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FileFooterId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FileHeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FilesId");

                    b.HasIndex("FileBodyId")
                        .IsUnique()
                        .HasFilter("[FileBodyId] IS NOT NULL");

                    b.HasIndex("FileFooterId")
                        .IsUnique()
                        .HasFilter("[FileFooterId] IS NOT NULL");

                    b.HasIndex("FileHeaderId")
                        .IsUnique()
                        .HasFilter("[FileHeaderId] IS NOT NULL");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("Domain.Entities.Template", b =>
                {
                    b.Property<Guid>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("FilesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemplateId");

                    b.HasIndex("FilesId")
                        .IsUnique()
                        .HasFilter("[FilesId] IS NOT NULL");

                    b.ToTable("Templates");
                });

            modelBuilder.Entity("Domain.Entities.FileAttachment", b =>
                {
                    b.HasOne("Domain.Entities.Files", "Files")
                        .WithMany("FilesAttachments")
                        .HasForeignKey("FilesId");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Entities.Files", b =>
                {
                    b.HasOne("Domain.Entities.FileBody", "FileBody")
                        .WithOne("Files")
                        .HasForeignKey("Domain.Entities.Files", "FileBodyId");

                    b.HasOne("Domain.Entities.FileFooter", "FileFooter")
                        .WithOne("Files")
                        .HasForeignKey("Domain.Entities.Files", "FileFooterId");

                    b.HasOne("Domain.Entities.FileHeader", "FileHeader")
                        .WithOne("Files")
                        .HasForeignKey("Domain.Entities.Files", "FileHeaderId");

                    b.Navigation("FileBody");

                    b.Navigation("FileFooter");

                    b.Navigation("FileHeader");
                });

            modelBuilder.Entity("Domain.Entities.Template", b =>
                {
                    b.HasOne("Domain.Entities.Files", "Files")
                        .WithOne("Template")
                        .HasForeignKey("Domain.Entities.Template", "FilesId");

                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Entities.FileBody", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Entities.FileFooter", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Entities.FileHeader", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Domain.Entities.Files", b =>
                {
                    b.Navigation("FilesAttachments");

                    b.Navigation("Template");
                });
#pragma warning restore 612, 618
        }
    }
}
